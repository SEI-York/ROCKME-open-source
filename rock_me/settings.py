"""
Django settings for pymec project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
import dj_database_url
import environ
import socket


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

ROOT_URLCONF = 'rock_me.urls'
WSGI_APPLICATION = 'rock_me.wsgi.application'


SITE_ID = 1
LOGIN_REDIRECT_URL = 'index'

# Required by core.LoginRequiredMiddleware
LOGIN_EXEMPT_URLS = [
    r'^accounts/'
]
LOGIN_URL = '/login'

# Used in core.contact
SUPPORT_EMAIL = 'incoming+SEI-York/rock_me@gitlab.com'

# Update from the .env file if it present
# Configuration handling
if not os.environ.get('DJANGO_ENV', ''):
    # only read the .env file locally
    ENV = environ.Env(
        # set casting, default value
        DEBUG=(bool, False)
    )
    environ.Env.read_env('.env')

# MANAGER CONFIGURATION
# ------------------------------------------------------------------------------
# See: https://docs.djangoproject.com/en/dev/ref/settings/#admins
ADMINS = [
    ("Admin user", "admin@example.com"),
]

# See: https://docs.djangoproject.com/en/dev/ref/settings/#managers
MANAGERS = ADMINS

# SECURITY WARNING: don't run with debug turned on in production!
# See: https://docs.djangoproject.com/en/dev/ref/settings/#debug
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')
SECRET_KEY = os.getenv('SECRET_KEY')

AUTHENTICATION_BACKENDS = [
    # Allow for admin login
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Application definition

INSTALLED_APPS = [
    # Default Django apps:
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.sites',

    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',

    # Third party
    'crispy_forms',     # Form layouts

    # Local apps
    'decart.core.apps.DecartCoreConfig',
    'rock_user.apps.RockUserConfig',
    'rock_me.apps.RockConfig',

    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Custom middleware to force auth on most pages
    'decart.core.middleware.LoginRequiredMiddleware',
]

TEMPLATES_ROOT = os.path.join(BASE_DIR, "templates")
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_ROOT],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                # `allauth` needs this from django
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                # Custom template context processors go here
            ],
        },
    },
]

# See: http://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs
CRISPY_TEMPLATE_PACK = 'bootstrap4'


# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_ROOT = os.getenv('STATIC_ROOT', os.path.join(BASE_DIR, 'staticfiles'))
STATIC_URL = '/static/'

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Database
# NOTE : This will key error if the DB env vars are not set
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
db_from_env = dj_database_url.config()
DATABASES = {
    'default': db_from_env
}

# Email backend settings for Django
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
sendgrid_username = os.getenv('SENDGRID_USERNAME')
sendgrid_password = os.getenv('SENDGRID_PASSWORD')
if sendgrid_username and sendgrid_password:
    EMAIL_HOST = 'smtp.sendgrid.net'
    EMAIL_HOST_USER = sendgrid_username
    EMAIL_HOST_PASSWORD = sendgrid_password
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
else:
    EMAIL_HOST = os.getenv('EMAIL_HOST')
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD')
    EMAIL_PORT = os.getenv('EMAIL_PORT')
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')

# Auth - registration
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
# overwrite forms
ACCOUNT_FORMS = {
    'signup': 'rock_user.forms.RocuUserSignupForm'
}


# PASSWORD STORAGE SETTINGS
# ------------------------------------------------------------------------------
# See https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# LOGGING
# ------------------------------------------------------------------------------
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# DEBUG stuff
if DEBUG:
    TEMPLATES[0]['OPTIONS']['debug'] = DEBUG
    # SITE CONFIGURATION
    # ----------------------------------------------------------------------
    # Hosts/domain names that are valid for this site
    # See https://docs.djangoproject.com/en/1.10/ref/settings/#allowed-hosts
    ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')

    # Add in the debug toolbar
    # MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
    # INSTALLED_APPS += ['debug_toolbar']

    # INTERNAL_IPS = ['127.0.0.1', '10.0.2.2', '192.168.24.1']

    # # tricks to have debug toolbar when developing with docker
    # if os.environ.get('USE_DOCKER') == 'yes':
    #     IP = socket.gethostbyname(socket.gethostname())
    #     INTERNAL_IPS += [IP[:-1] + '1']

    # DEBUG_TOOLBAR_CONFIG = {
    #     'DISABLE_PANELS': [
    #         'debug_toolbar.panels.redirects.RedirectsPanel',
    #     ],
    #     'SHOW_TEMPLATE_CONTEXT': True,
    # }

    # # django-extensions
    # INSTALLED_APPS += ['django_extensions']

    # TEST_RUNNER = 'django.test.runner.DiscoverRunner'

